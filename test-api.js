// Script de teste para a API GP M√°quinas
// Testa as principais funcionalidades da API

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

// Configura√ß√£o do axios
const api = axios.create({
    baseURL: API_BASE_URL,
    timeout: 10000,
    headers: {
        'Content-Type': 'application/json'
    }
});

// Fun√ß√£o para testar health check
async function testHealthCheck() {
    try {
        console.log('üîç Testando health check...');
        const response = await api.get('/health');
        console.log('‚úÖ Health check:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå Health check falhou:', error.message);
        return false;
    }
}

// Fun√ß√£o para testar login
async function testLogin() {
    try {
        console.log('üîç Testando login...');
        const loginData = {
            username: 'admin',
            password: 'admin123'
        };
        
        const response = await api.post('/auth/login', loginData);
        console.log('‚úÖ Login bem-sucedido');
        return response.data.token;
    } catch (error) {
        console.error('‚ùå Login falhou:', error.response?.data || error.message);
        return null;
    }
}

// Fun√ß√£o para testar cria√ß√£o de servi√ßo
async function testCreateService(token) {
    if (!token) {
        console.log('‚ö†Ô∏è Token n√£o dispon√≠vel, pulando teste de cria√ß√£o de servi√ßo');
        return false;
    }
    
    try {
        console.log('üîç Testando cria√ß√£o de servi√ßo...');
        
        const serviceData = {
            machineCode: 'TEST001',
            machineType: 'Compressor',
            storeId: 'GPTabo√£o',
            location: 'P√°tio',
            serviceTypeId: 'other',
            technicianId: 3,
            serviceDate: '2025-08-28',
            description: 'Teste de API',
            cost: 0.50,
            status: 'completed',
            notes: 'Teste automatizado'
        };
        
        const response = await api.post('/services', serviceData, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('‚úÖ Servi√ßo criado com sucesso:', response.data);
        return response.data.service.service_id;
    } catch (error) {
        console.error('‚ùå Cria√ß√£o de servi√ßo falhou:', error.response?.data || error.message);
        return false;
    }
}

// Fun√ß√£o para testar busca de servi√ßos
async function testSearchServices(token) {
    if (!token) {
        console.log('‚ö†Ô∏è Token n√£o dispon√≠vel, pulando teste de busca');
        return false;
    }
    
    try {
        console.log('üîç Testando busca de servi√ßos...');
        
        const response = await api.get('/services/search?machineCode=TEST001', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('‚úÖ Busca bem-sucedida:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå Busca falhou:', error.response?.data || error.message);
        return false;
    }
}

// Fun√ß√£o principal de teste
async function runTests() {
    console.log('üöÄ Iniciando testes da API GP M√°quinas...\n');
    
    // Teste 1: Health check
    const healthOk = await testHealthCheck();
    if (!healthOk) {
        console.log('‚ùå Servidor n√£o est√° respondendo, abortando testes');
        return;
    }
    
    console.log('');
    
    // Teste 2: Login
    const token = await testLogin();
    
    console.log('');
    
    // Teste 3: Cria√ß√£o de servi√ßo
    const serviceCreated = await testCreateService(token);
    
    console.log('');
    
    // Teste 4: Busca de servi√ßos
    const searchOk = await testSearchServices(token);
    
    console.log('');
    console.log('üìä Resumo dos testes:');
    console.log(`   Health Check: ${healthOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Login: ${token ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Cria√ß√£o de Servi√ßo: ${serviceCreated ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Busca de Servi√ßos: ${searchOk ? '‚úÖ' : '‚ùå'}`);
    
    if (healthOk && token && serviceCreated && searchOk) {
        console.log('\nüéâ Todos os testes passaram!');
    } else {
        console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
    }
}

// Executar testes se o arquivo for executado diretamente
if (require.main === module) {
    runTests().catch(error => {
        console.error('‚ùå Erro durante os testes:', error.message);
        process.exit(1);
    });
}

module.exports = {
    testHealthCheck,
    testLogin,
    testCreateService,
    testSearchServices,
    runTests
};
